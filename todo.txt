Presentation:
- diagrams:
main flow generate_answer
indexing

- RAGs and Assistants explanation.

- Prompt Techniques implemented.

Features:
- Countdown of Remaining Messages. (set limit 10) Done
LIMIT_MESSAGES: puede setearse directamente en main.py y no pasarlo en app.py. en main.generate_answer retornara remaining_messages. y el bloqueo sera del Frontend si dicho value es 0. Done
- Frontend: cuando se envia un mensaje, bloquear boton de send hasta recibir la respuesta del ai chatbot. Done
- main.py generate_answer: add error handling Done

Prompts:
modificar mediante chatgpt el conversation_memory.md Done

links:
- https://learn.deeplearning.ai/courses/advanced-retrieval-for-ai/lesson/6/embedding-adaptors
- https://cookbook.openai.com/examples/search_reranking_with_cross-encoders
- https://docs.trychroma.com/guides
- https://docs.trychroma.com/guides/embeddings
- https://docs.trychroma.com/integrations/openai
- https://docs.trychroma.com/getting-started



17/04/2025

Recap:

storegae
    db
        __init__.py
        db_manager.py
    vector_db
        __init__.py
        retriever.py
prompts
    __init__.py
    consentiment.md
    conversation_memory.md
    quantum_rag.md
    sales_detector.md
utils
    __init__.py
    conversation.py
    file_manager.py
    llm_manager.py
    logger.py
    user_data.py
logs
vectorstore


19/04/2025
I have fixed rereanking in vectorstore.py class RetrievalStrategies
in vectorstore.py class ChromaVectorStore add: 
    import nltk
    nltk.download('stopwords')
    ltk.download('punkt_tab')

Review in vectorstore.py class RetrievalStrategies: 
    text_search (ver si ya no la tiene chroma por defecto)
    HyDE (ver de sacarla)

